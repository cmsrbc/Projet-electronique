#include <Wire.h>
#include <Arduino.h>
#include <RTClib.h>
#include <Adafruit_GFX.h>
#include <Adafruit_LEDBackpack.h>
#include <Adafruit_SSD1306.h>
#include <Encoder.h>
#include <LedControl.h>
#include <SPI.h>

RTC_DS1307 rtc;
LedControl lc = LedControl(11, 13, 7, 4);
const byte NB_MAX7219 = 4;
byte afficheur[8 * NB_MAX7219];
Encoder myEnc(5, 6); 

//encodeur(potentiometre)
#define ENCODER_DO_NOT_USE_INTERRUPTS
#define OLED_RESET 4

//capteur ultrason
#define ECHO_PIN     D7
#define TRIGGER_PIN  D8


// Encoder connecté aux pins 5 et 6
int lastHour = 0;
int lastMinute = 0;
bool isAlarmSet = false;

//pin capteur ultrason
int trigPin = 8;
int echoPin = 7;
int duree;

//pin buzzer et led
int piezoPin = 9;
int pin_LED = 13;
int state = LOW;

// Pins pour les boutons poussoirs
const int buttonPinHour = 2;
const int buttonPinMinute = 3;


void montrerChiffre(int chiffre, int panneau) {
  byte chiffres[10][8] = {
      {B00011100, B00100010, B00100010, B00100010, B00100010, B00100010, B00100010, B00011100}, // 0
      {B00001000, B00011000, B00001000, B00001000, B00001000, B00001000, B00001000, B00011100}, // 1
      {B00011100, B00100010, B00000010, B00000010, B00000100, B00001000, B00010000, B00111110}, // 2
      {B00011100, B00100010, B00000010, B00001100, B00000010, B00000010, B00100010, B00011100}, // 3
      {B00000100, B00001100, B00010100, B00100100, B00100100, B00111110, B00000100, B00000100}, // 4
      {B00111110, B00100000, B00100000, B00111100, B00000010, B00000010, B00100010, B00011100}, // 5
      {B00011100, B00100010, B00100000, B00111100, B00100010, B00100010, B00100010, B00011100}, // 6
      {B00111110, B00000010, B00000010, B00000100, B00001000, B00010000, B00010000, B00010000}, // 7
      {B00011100, B00100010, B00100010, B00011100, B00100010, B00100010, B00100010, B00011100}, // 8
      {B00011100, B00100010, B00100010, B00100010, B00011110, B00000010, B00100010, B00011100}  // 9
  };

  for (int i = 0; i < 8; i++) {
    lc.setRow(panneau, i, chiffres[chiffre][i]);
  }
}
void afficherHeureSurMatrice(int heures, int minutes) {
  int dizaineHeure = heures / 10;
  int uniteHeure = heures % 10;
  int dizaineMinute = minutes / 10;
  int uniteMinute = minutes % 10;

  montrerChiffre(dizaineHeure, 3);
  montrerChiffre(uniteHeure, 2);
  montrerChiffre(dizaineMinute, 1);
  montrerChiffre(uniteMinute, 0);

  lc.setLed(1, 2, 0, true); 
  lc.setLed(1, 5, 0, true);
}


void reglage_heure(){
// Régler l'heure à l'aide de l'encodeur
long newPosition = myEnc.read();
if (newPosition > lastHour) {
lastHour++;
rtc.adjust(DateTime(now.year(), now.month(), now.day(), lastHour, now.minute(), now.second()));
}
if (newPosition < lastHour) {
lastHour--;
rtc.adjust(DateTime(now.year(), now.month(), now.day(), lastHour, now.minute(), now.second()));
}
// Régler l'heure à l'aide des boutons poussoirs
if (digitalRead(buttonPinHour) == HIGH) {
lastHour++;
rtc.adjust(DateTime(now.year(), now.month(), now.day(), lastHour, now.minute(), now.second()));
}
if (digitalRead(buttonPinMinute) == HIGH) {
lastMinute++;
rtc.adjust(DateTime(now.year(), now.month(), now.day(), now.hour(), lastMinute, now.second()));
}
delay(1000); // Attendez 1 seconde

}
void melodie(){
int decompte_reveil;
do {
delay(1000);
decompte_reveil++;
}
//durée de la melodie < 10 secondes
//etat de la led inversé
for(int a=0;a<10;a++){
state= !state;
digitalWrite(pin,state);
delay(1000);
}    //inversion de l'état de la LED chaque seconde
for (int d=0;d<2;d++)
{
for(int b=0;b<2;b++){
tone(piezoPin, 261.626, 500);
tone(piezoPin, 293.665, 500);
tone(piezoPin, 329.628, 500);
tone(piezoPin, 261.626, 500);
delay(100);
}//partie1 de la melodie
for(int c=0;c<2;c++){
tone(piezoPin, 329.628, 500);
tone(piezoPin, 349.228, 500);
tone(piezoPin, 391.995, 500);
delay(250);
//partie 2 de la melodie
}}
//fin de la mélodie
notone(piezoPin);

}

void loop() {


//afficher l'heure 
afficherHeureSurMatrice(heures, minutes);
//Menu
display.println("Menu interactif:");
display.println("1-Reglage de l'heure ");
display.println("2-Reglage du reveil");
//parametrage matrice a faire!!!!
if(digitalRead(pin_boutton1)=1 &&digita){
//si le bouton poussoir a la pin 2 appuyé
display.println("1-Reglage de l'heure ");
reglage_heure();


else {
  if (digitalRead(pin_boutton2)=1){
    //si le boutton poussoir a la pin 3 est appuyé
    display.println("2-Reglage du reveil");
    reglage_heure();

  }
}
}
display.println("Reveil activé ");
  DateTime now = rtc.now();
  int heures = now.hour();
  int minutes = now.minute();
  afficherHeureSurMatrice(heures, minutes);
if (DateTime  == heurereveil){
//le capteur est sensible au pulsations >=10 secondes
//nettoyage de haut impulsion
digitalWrite(trigPin, LOW);
delayMicroseconds(5);
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
//lire le signal a partir du capteur
pinMode(echoPin, INPUT);
//temps de trajet de l'onde
duree = pulseIn(echoPin, HIGH);
//conversion en secondes de la duree
duree = duree/1000;
//si les deux bouttons poussoirs ne sont pas sont appuyés
while(digitalRead(pin_boutton1)!=1 && digitalRead(pinboutton2)!=1)
{
  melodie();
}
display.println("temps pour eteindre :",decompte_reveil);
delay(500);

}
}


void setup()
{
  Serial.begin(57600);
Wire.begin();
rtc.begin();
matrix.begin(0x70); // Adresse I2C de la matrice de LED
display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // Initialise l'écran OLED
//initialise le capteur ultrason
pinMode(trigPin, OUTPUT);
pinMode(echoPin, OUTPUT);
// Initialise les boutons poussoirs
pinMode(buttonPinHour, INPUT);
pinMode(buttonPinMinute, INPUT);

// Réglez l'heure du RTC (à ajuster selon vos besoins)
rtc.adjust(DateTime(F(DATE), F(TIME)));
//initialisation heure reveil
heurereveil.begin();
//initialiser les pin du buzzer et de la led
pinMode(piezoPin, OUTPUT);
pinMode (pin_LED,OUTPUT);
  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
    Serial.flush();
    abort();
  }

  if (!rtc.isrunning()) {
    Serial.println("RTC is NOT running !");
  }

  for (int index = 0; index < NB_MAX7219; index++) {
    lc.shutdown(index, false);
    lc.setIntensity(index, 6);
    lc.clearDisplay(index);
  }

}
